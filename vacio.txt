-- CURSO DE GIT Y GITHUB--
----------------------------
git config --global (configurar Git para nuesto equipo)
=> Iniciar un un proyecto con GIT:

    git init

    - se crean los archivos que van a llevar el control de los cambios en un directorio
      .git que siempre etsta oculto.

=> Agregar los primeros archivos o archivos modificados:

    git add . (agrega todos los cambios en los archivos que se encuentran en ese directorio)
    git add nombre_archivo.txt (agrega un archivo o archivos en especifico)

    - en esta parte los archivos se encuentran en un área en la memoria RAM, que conocemos como Staging.

=> Hacer el primer commit:

    git commit -m "mensaje del comit, por buena practica este no debe ir vacio,  ademas de que Git no lo permite"

    -  Agrega todos los cambios realizados en los archivos y los guarda con un identificador unico
        f0de05cfa4d7e0aed446e2ce87ed30b948f83635

<< Directorio ==>> Staging ==>> Repositorio >>
    ---------------------------------------------
    - Directorio: local
    - Staging: lugar en memoria donde se estan guardando los cambios
    - Repositorio: Donde se encuentran todos los cambios realizados
    ----------------------------------------------

<<< Ciclo de vida o estados de los archivos en Git:>>>

    -  Cuando trabajamos con Git, nuestros archivos pueden vivir y moverse entre 4 diferentes estados:

    >> Archivos Tracked: 
    Son los archivos que viven dentro de Git, no tienen cambios pendientes y sus últimas actualizaciones 
    han sido guardadas en el repositorio gracias a los comandos git add y git commit.

    >> Archivos Staged: 
    Son archivos en Staging. Viven dentro de Git y hay registro de ellos porque han sido 
    afectados por el comando git add, aunque no sus últimos cambios. Git ya sabe de la existencia 
    de estos últimos cambios pero todavía no han sido guardados definitivamente en el repositorio 
    porque falta ejecutar el comando git commit.

    >> Archivos Unstaged: 
    Entiendelos como archivos “Tracked pero Unstaged”. Son archivos que viven dentro de Git pero no han sido 
    afectados por el comando git add ni mucho menos por git commit. Git tiene un registro de estos archivos 
    pero está desactualizado, sus últimas versiones solo están guardadas en el disco duro.

    >> Archivos Untracked: 
    Son archivos que NO viven dentro de Git, solo en el disco duro. Nunca han sido afectados por git add, 
    así que Git no tiene registros de su existencia.

=> Otros Comandos de git:

    git status (Nos permite ver el estado de todos nuestros archivos y carpetas)

    git log nombre_archivo.txt (nos permite ver el historial de commits que se han hecho en este archivo)

    git diff f0de05cfa4d7e0aed446e2ce87ed30b948f83635 731897e78bc7331be5c4381242b98878029a6762 (permite comparar
        estos dos commits, saber exactamente que fue  lo que se modifico, se slimino o se agrego)
    
    git reset 731897e78bc7331be5c4381242b98878029a6762 --hard (regresa a ese commit en especifico, y borra todo los 
        commits que se hayan hecho despues de este)
    
    git reset 731897e78bc7331be5c4381242b98878029a6762 --soft (regresa al estado anterior en el Directorio de trabajo, 
    pero los archivos en Staging siguen estando alli si se hizo un git add para un futuro commit )

    git checkout f0de05cfa4d7e0aed446e2ce87ed30b948f83635 nombre_archivo.txt (regresa el archivo
        en el momento del commit, y en el directorio muestra el estado de ese archivo sinn las 
        modificaciones posteriores al commit, y si se hace un commit, se pueden perder todos los cambios posteriores )

    git checkout master nombre_archivo.txt (trae la version el arvhivo con el ultimo commit que esta en el Repositorio)

    git rm --cached (Elimina los archivos del área de Staging y del próximo commit pero los mantiene 
        en nuestro disco duro.
    
    git rm --force (Elimina los archivos de Git y del disco duro. Git siempre guarda todo, 
        por lo que podemos acceder al registro de la existencia de los archivos, de modo 
        que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

    ------------------------
    =>otras formas de salir de vim  <=

        esq
        :q (salir sin guardar cambios al archivo)
        :wq (salir y guardar los cambios)
        :w (guardar cambios sin salir)
        :q! (sale del editor descartando los cambios)        
    ------------------------
<<<<Repositorios Remotos>>>>

    git clone url?dlfgmdfogij00 (clona el repositorio en el servidor remoto y trae una copia 
        los archivos que se encuentran en ese repositorio)

    git  fetch (Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local)

    git push  (envia todos los cambios al servidor remoto despues de hacer uno o vrios commits)

    git merge (mezcla los cambios del servidor y nuestro local. Tambien puede mezclar ramas)

    git pull  (hace lo mismo  que git fetch y git merge al mismo tiempo)

    ----------------------------
    HEAD (commit mas reciennte/ Cabecera)
    ----------------------------
    -> Ramas o Branches <-

    git branch nombre_Rama (crea una rama a partir del ultimo commit)

    git checkout nombre_Rama (cambia a la nueva rama o moverse entre ramas )

    git commit -am "cambios en la cabeccera" (Agrega y hace el comit, solo en los archivos que ya 
        hayan sido afectados por un add . previamente, no funciona con archivos nuevos)

    ----------------
    para hacer un git merge de dos ramas, tengo que cambiar a la rama en donde quiero tener
    los nuevos cambios de la otra rama, para traer los cambios de la rama cabecera_dev,
    me tengo que cambiar a master , para que me puueda traer el ultimo commit de master y
    a su vez me traera el ultmo commit de cabecera_dev con todos los cambios y creando un nuevos
    commit en master.
    ----------------
    
     













